{
  "ver": "1.0.25",
  "uuid": "c9ab710e-f32e-49d3-8d74-2ea7caabe732",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n#extension GL_OES_standard_derivatives : enable\n  precision highp float;\n  varying vec4 v_color;\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform float unitHeight;\nuniform float unitWidth;\nuniform float outlineSize;\n  uniform vec4 outlineColor;\n  float screenPxRange() {\n    vec2 unitRange = vec2(unitWidth,unitHeight);\n    vec2 screenTexSize = vec2( abs(1.0/dFdx(v_uv0.x)),abs(1.0/dFdy(v_uv0.y)));\n    return max(0.5*dot(unitRange, screenTexSize), 1.0);\n  }\n  void main () {\n    vec4 msd = texture2D(texture, v_uv0);\n    float sd = msd.a;\n    float  screenPxr = screenPxRange();\n    float bgScreenPxDistance = screenPxr* (sd-0.5 );\n    float opacity = clamp( 0.0, 1.0,bgScreenPxDistance +0.5);\n    float fgScreenPxDistance = screenPxr* (sd-0.5 + outlineSize);\n    float fopacity = clamp( 0.0, 1.0,fgScreenPxDistance +0.5);\n    float ft = smoothstep(0.0,1.0,fopacity - opacity);\n    vec4 color = vec4(v_color.rgb,v_color.a * opacity);\n    vec4 fgColor = outlineColor * ft + v_color *(1.0 - ft);\n    gl_FragColor =vec4(v_color.rgb, sd);;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n#extension GL_OES_standard_derivatives : enable\n  precision highp float;\n  in vec4 v_color;\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform ubo1 {\n  float unitHeight;\n  float unitWidth;\n    float outlineSize;\n  };\n  uniform ubo2 {\n    vec4 outlineColor;\n  };\n  float screenPxRange() {\n    vec2 unitRange = vec2(unitWidth,unitHeight);\n    vec2 screenTexSize = vec2( abs(1.0/dFdx(v_uv0.x)),abs(1.0/dFdy(v_uv0.y)));\n    return max(0.5*dot(unitRange, screenTexSize), 1.0);\n  }\n  void main () {\n    vec4 msd = texture(texture, v_uv0);\n    float sd = msd.a;\n    float  screenPxr = screenPxRange();\n    float bgScreenPxDistance = screenPxr* (sd-0.5 );\n    float opacity = clamp( 0.0, 1.0,bgScreenPxDistance +0.5);\n    float fgScreenPxDistance = screenPxr* (sd-0.5 + outlineSize);\n    float fopacity = clamp( 0.0, 1.0,fgScreenPxDistance +0.5);\n    float ft = smoothstep(0.0,1.0,fopacity - opacity);\n    vec4 color = vec4(v_color.rgb,v_color.a * opacity);\n    vec4 fgColor = outlineColor * ft + v_color *(1.0 - ft);\n    gl_FragColor =vec4(v_color.rgb, sd);;\n  }"
      }
    }
  ],
  "subMetas": {}
}